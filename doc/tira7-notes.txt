MOP.   TIRA-7 NOTES.
DATE.  October 05th, 2012.

ORGANIZATION.

[developers]
 - tim.gollub@uni-weimar.de
 - arnd.oberlaender@uni-weimar.de
 - johannes.kiesel@uni-weimar.de
 - umair.jabbar@uni-weimar.de
 
[participants]
 - christopher.luebbemeier@uni-weimar.de
 - steven.burrows@uni-weimar.de
 - tom.paschke@uni-weimar.de
 - clement.welsch@uni-weimar.de

TASKS.

[virtual os]
 - start/stop virtual machine automatically.
 
[platform - client]
 - stepwise execution process.
 - responsive layout.
   
[platform - server]
 - networking. get all apps for a task.
 - user administration.
   
[platform - worker]
 - error logging and presentation.
 - ommit use of $-sign for parameters.
 
[platform - database]
 - construct run-id from input parameters and vice versa.
 
[tasks & apps]
 - task import & application deployment.
 - parse parameter values from directory.



STORIES.

[getting started]
 - cloud scenario.
   - user signs up for an account.
   - user selects the prefered vitual machine (vm).
   - user gets an ssh-connection (remote desktop?) to the vm.
   - user can access the tira git repo to get the latest TIRA version.
   - user gets an http connection to the TIRA instance on the vm.
 - local scenario.
   - user checks-out the tira git repo.
   - specifies username and password on first visit.
   
[installing new tasks]
  - install existing task.
    - login to TIRA. Navigate browser to an undefined url.
    - enter url of the existing task into the displayed form.
    - TIRA fetches all required task resources and links them to the current url.
    - TIRA searches for apps solving this task and integrates them into the platform as remote apps.
  - own task.
    - open the tira/tasks/ folder.
    - create new task record.
    - provide data and evaluation programs.
    - specifiy public/private task.

[create new task record]
TODO.
    
[installing new apps]
  - open the tira/apps/ folder.
  - create new app record.
  - provide app program.
  - specify public/private app.
  
[create new app record]
    - starting point: executable command line program.
    - step 1: 
	  - write minimal record = {"MAIN":"<cmd>"}
	  - save it under <app>.tira in the tira/apps/ folder (or any subfolder).
	  - start tira and navigate to <base-url>/apps/<name>
	  - click execute. The output files of the run are accessible from the result table.
	- step 2.
	  - extend record to contain the parameters of the program.
	    - add <param> expressions to the command.
	    - add <param> fields to the program record = {<param1>:"[0-9]+", <param2>: ["opt1","opt2"]}
	  - reload tira web page of the app.
	  - run app with different parameters.
	  - test retrieval functionality on the web page.
	step 3.
	  - extend record with additional ui information.

[program development and TIRA]
  - goal: programmers use TIRA already while implementing the app. e.g. for testing and sharing.
  - all resources are always up to date. i.e. any changes are recognized without restarting TIRA.
  - TIRA runs the original code, not jars or other executables.
 

[program execution]
  - how programs are executed in tira.
    - starting point: http get request to program resource, e.g. localhost:2306/apps/echo .
    - step 1: user fills in at least one value for all required parameters, clicks execute.
    - step 2: http post request to tira server, e.g. at localhost:2306/apps/<name>/?param1=0&param2=opt1.
    - step 3: TiraNode receives query string and creates a JSONObject from it, the runConfig.
    - step 4: the runConfig is passed via TiraApp to the respective program, where the runConfig is decomposed into individual runs.
    - step 5: every new run is added to the program's database as pending run (with Status == TODO) and with a unique runID.
    - step 6: the TiraApp requests, with threads, from each program database pending results and executes them.
    - step 7: execution is done by substituting the value for MAIN in the program record according to the values in the runConfig. The result of this substitution, the command, is written to a file called 'run.bat'.
    - step 8: to call run.bat, a run directory in 'data/<program>/' is created according to the runID. Then a new system process is created with working directory equal to the created run directory and run.bat is called from there.
    - step 9: every output of the executed program is written to the database using the update function. Files written to the run directory are made accessible by updating the database with the location of the files, e.g. http://localhost:2306/data/echo/run1/result.txt.
    
[result storage & retrieval]
  - how to retrieve existing runs.
    - starting point: http get request to program resource, e.g. localhost:2306/programs/echo .
    - step 1: user can fill in some of the parameters, clicks search.
    - step 2: http get request to tira server, e.g. at localhost:2306/programs/<name>/?param1=0&param2=opt1.
    - step 3: TiraNode receives query string and creates a JSONObject from it, the runConfig.
    - step 4: the runConfig is passed via TiraApp to the respective program, where all runs matching the query are retrieved as JSONArray 'results'.
    - step 5: the result json-array is written as an array called RESULTS into the javascript of the returned html.
    
[html page construction]
  - info box. (<program>.info)
  - parameter box.
  - result box.
  

[parameter substitution]

[input validation]

[record specification]

[system vs. program parameters]
  - to execute a program run, some system specific information like program and data directory paths are needed. this information is passed to the program with the program record. this information should be private.


COMPONENTS.

[back-end]
  - TiraApp.java
    
[database]
  - LocalProgram.java
  - RemoteProgram.java
  
[front-end]
  - TiraNode.java
  - tira.html
  - tira.css
  - tira.js
  
[misc]
  - Util.java

[programs]
  - PAN submission programs + baseline program.
  - PAN evaluation program.
  - PAN corpus construction program.
  - Corpora project (TIRA services for preprocessing datasets with hadoop).

