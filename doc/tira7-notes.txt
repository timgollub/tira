MOP.   TIRA-7 NOTES.
DATE.  August 09th, 2012.

ORGANIZATION.

[developers]
 - tim.gollub@ubi-weimar.de
 - arnd.oberlaender@uni-weimar.de
 - johannes.kiesel@uni-weimar.de
 - umair.jabbar@uni-weimar.de
 
[participants]
 - christopher.luebbemeier@uni-weimar.de
 - steven.burrows@uni-weimar.de
 - tom.paschke@uni-weimar.de


STORIES.

[program deployment]
  - how to deploy a program to tira.
    - starting point: executable command line program.
    - step 1: 
	  - write minimal record = {"MAIN":"<cmd>"}
	  - save it under "record.json" or <name>.record in the tira programs folder, subfolder <name>.
	  - start tira and navigate to <base-url>/programs/<name>
	  - run program. The output files of the run are accessible from the result table.
	- step 2.
	  - extend record to contain the parameters of the program.
	    - add $<param> expressions to the command.
	    - add <param> fields to the program record = {<param1>:"[0-9]+", <param2>: ["opt1","opt2"]}
	  - request tira update for the program.
	  - run program with different parameters.
	  - test retrieval functionality on the web page.
	step 3.
	  - extend record with additional ui information.
	    - add program label to record.

[program execution]
  - how programs are executed in tira.
    - starting point: http get request to program resource, e.g. localhost:2306/programs/echo .
    - step 1: user fills in at least one value for all required parameters, clicks execute.
    - step 2: http post request to tira server, e.g. at localhost:2306/programs/<name>/?param1=0&param2=opt1.
    - step 3: TiraNode receives query string and creates a JSONObject from it, the runConfig.
    - step 4: the runConfig is passed via TiraApp to the respective program, where the runConfig is decomposed into individual runs.
    - step 5: every new run is added to the program's database as pending run (with Status == TODO) and with a unique runID.
    - step 6: the TiraApp requests, with threads, from each program database pending results and executes them.
    - step 7: execution is done by substituting the value for MAIN in the program record according to the values in the runConfig. The result of this substitution, the command, is written to a file called 'run.bat'.
    - step 8: to call run.bat, a run directory in 'data/<program>/' is created according to the runID. Then a new system process is created with working directory equal to the created run directory and run.bat is called from there.
    - step 9: every output of the executed program is written to the database using the update function. Files written to the run directory are made accessible by updating the database with the location of the files, e.g. http://localhost:2306/data/echo/run1/result.txt.
    
[result storage & retrieval]
  - how to retrieve existing runs.
    - starting point: http get request to program resource, e.g. localhost:2306/programs/echo .
    - step 1: user can fill in some of the parameters, clicks search.
    - step 2: http get request to tira server, e.g. at localhost:2306/programs/<name>/?param1=0&param2=opt1.
    - step 3: TiraNode receives query string and creates a JSONObject from it, the runConfig.
    - step 4: the runConfig is passed via TiraApp to the respective program, where all runs matching the query are retrieved as JSONArray 'results'.
    - step 5: 
    
[html page construction]
  - info box. (<program>.info)
  
  - parameter box.
  
  - result box.
  
  - pipes box.

[parameter substitution]

[input validation]

[record specification]

[system vs. program parameters]
  - to execute a program run, some system specific information like program and data directory paths are needed. this information is passed to the program with the program record. this information should be private.

COMPONENTS.

[back-end]
  - TiraApp.java
    
[database]
  - LocalProgram.java
  - RemoteProgram.java
  
[front-end]
  - TiraNode.java
  - tira.html
  - tira.css
  - tira.js
  
[misc]
  - Util.java

[programs]
  - PAN submission programs + baseline program.
  - PAN evaluation program.
  - PAN corpus construction program.
  - Corpora project (TIRA services for preprocessing datasets with hadoop).


SPRINTS.
